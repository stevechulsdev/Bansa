apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"

    // Increase the [VERSION_CODE] variable in the "version.properties"
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        // Increase "value" variable only for export the release apk
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1
        }

        def code = versionProps['VERSION_CODE'].toInteger() + value

        versionProps['VERSION_CODE'] = code.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.stevechulsdev.bansa"
            minSdkVersion 23
            targetSdkVersion 29
            versionCode code
            versionName "1.0.0"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            archivesBaseName = "Bansa_" + versionCode + "_" + versionName + "_" + new Date().format("yyyyMMddhhmmss")

            buildConfigField "String", "GOOGLE_API_KEY", "\"" + getGoogleApiKey() + "\""
            buildConfigField "String", "KAKAO_API_KEY", "\"" + getKakaoApiKey() + "\""

            buildConfigField "String", "ADMOB_API_KEY", "\"" + getAdmobApiKey() + "\""
            buildConfigField "String", "ADMOB_AD_ID", "\"" + getAdmobAdId() + "\""

            buildConfigField "String", "KAKAO_APP_KEY", "\"" + getKakaoAppKey() + "\""
            buildConfigField "String", "KAKAO_SCHEME", "\"" + getKakaoScheme() + "\""
            buildConfigField "String", "KAKAO_LINK_HOST", "\"" + getKakaoLinkHost() + "\""
        }
    } else {
        throw new GradleException("Could not read version.properties")
    }

    Properties localProps = new Properties()
    localProps.load(project.rootProject.file('local.properties').newDataInputStream())

    // Keystore information variable
    signingConfigs {
        releaseWithSignedKey {
            storeFile file(localProps.getProperty("SIGNED_STORE_FILE"))
            storePassword localProps.getProperty("SIGNED_STORE_PASSWORD")
            keyAlias localProps.getProperty("SIGNED_KEY_ALIAS")
            keyPassword localProps.getProperty("SIGNED_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            debuggable true
//            applicationIdSuffix '.debug'
            // Suffix for package name, example "com.codberg.nkp.debug"
            resValue "string", "app_name", "반사-debug"  // App name for the debug apk
            minifyEnabled false
            shrinkResources false
            useProguard false   // Setting the proguard is unused
        }
        release {
            debuggable false
            signingConfig signingConfigs.releaseWithSignedKey
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "반사"    // App name for the release apk
            minifyEnabled true      // minify unused source code
            shrinkResources true    // shrink resources
        }
    }

    dataBinding {
        enabled = true
    }
}

def getGoogleApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("GOOGLE_API_KEY")
}

def getKakaoApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("KAKAO_API_KEY")
}

def getAdmobApiKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("ADMOB_API_KEY")
}

def getAdmobAdId() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("ADMOB_AD_ID")
}

def getKakaoAppKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("KAKAO_APP_KEY")
}

def getKakaoScheme() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("KAKAO_SCHEME")
}

def getKakaoLinkHost() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("KAKAO_LINK_HOST")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    kapt 'com.android.databinding:compiler:3.1.4'

    // firebase
    implementation 'com.google.firebase:firebase-core:17.1.0'           // core
    implementation 'com.google.firebase:firebase-auth:19.0.0'           // auth
    implementation 'com.google.android.gms:play-services-auth:17.0.0'   // google login
    implementation 'com.google.firebase:firebase-firestore:21.0.0'      // cloud firestore
    implementation 'com.google.firebase:firebase-messaging:20.0.0'      // fcm

    // stevechulsdev Library
//    implementation 'com.github.stevechulsdev:ScSns:1.0.5'           // ScSns
    implementation 'com.github.stevechulsdev:ScLog:1.0.8'           // ScLog
    implementation 'com.github.stevechulsdev:ScDisplayUtils:1.1.13'  // ScDisplayUtils
    implementation 'com.github.stevechulsdev:ScNetwork:1.0.1'       // ScNetwork

    // anko
    implementation 'org.jetbrains.anko:anko-commons:0.10.8'     // commons

    // kakao login
    implementation group: 'com.kakao.sdk', name: 'usermgmt', version: '1.21.1'
    implementation group: 'com.kakao.sdk', name: 'kakaolink', version: '1.21.1'

    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    // Google Admob
    implementation 'com.google.android.gms:play-services-ads:18.3.0'
}

apply plugin: 'com.google.gms.google-services'
